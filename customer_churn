{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"customer_churn","provenance":[],"authorship_tag":"ABX9TyOKPzRu1pj1uReDB1flj0MO"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"XXG0xGWjAK-9","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":176},"outputId":"14093a85-ace4-44a1-bf65-fb8c3055ca8d","executionInfo":{"status":"ok","timestamp":1587914076996,"user_tz":-330,"elapsed":26469,"user":{"displayName":"himanshu bansal","photoUrl":"","userId":"02724652374268117622"}}},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')\n","%cd gdrive\n","%cd My Drive\n","%cd machine_hack"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/gdrive\n","/content/gdrive\n","/content/gdrive/My Drive\n","/content/gdrive/My Drive/machine_hack\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"7zbQR__1AWx6","colab_type":"code","colab":{}},"source":["!wget https://raw.githubusercontent.com/himanshu16497/machine_hack/master/Test.csv"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YVsnI77EA3CD","colab_type":"code","colab":{}},"source":["!wget https://raw.githubusercontent.com/himanshu16497/machine_hack/master/Train.csv"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"h8pvbOoZWasB","colab_type":"code","colab":{}},"source":["#global variable\n","\n","logs=[]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"pgk59JNYA-9y","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":624},"outputId":"a3bfa48e-519d-4018-e6e7-b22b9a4f9672","executionInfo":{"status":"ok","timestamp":1587914079757,"user_tz":-330,"elapsed":4517,"user":{"displayName":"himanshu bansal","photoUrl":"","userId":"02724652374268117622"}}},"source":["import pandas as pd\n","\n","train= pd.read_csv('Train.csv')\n","test= pd.read_csv('Test.csv')\n","\n","print(train.isnull().sum())\n","print(test.isnull().sum())"],"execution_count":3,"outputs":[{"output_type":"stream","text":["feature_0     0\n","feature_1     0\n","feature_2     0\n","feature_3     0\n","feature_4     0\n","feature_5     0\n","feature_6     0\n","feature_7     0\n","feature_8     0\n","feature_9     0\n","feature_10    0\n","feature_11    0\n","feature_12    0\n","feature_13    0\n","feature_14    0\n","feature_15    0\n","labels        0\n","dtype: int64\n","feature_0     0\n","feature_1     0\n","feature_2     0\n","feature_3     0\n","feature_4     0\n","feature_5     0\n","feature_6     0\n","feature_7     0\n","feature_8     0\n","feature_9     0\n","feature_10    0\n","feature_11    0\n","feature_12    0\n","feature_13    0\n","feature_14    0\n","feature_15    0\n","dtype: int64\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"YeSYY2-FBeDB","colab_type":"text"},"source":["We see that no features are missing"]},{"cell_type":"code","metadata":{"id":"zol7rcSIBbN2","colab_type":"code","outputId":"61aa5ca9-a8d3-4016-f43b-2651b91b6c37","executionInfo":{"status":"ok","timestamp":1587745928339,"user_tz":-330,"elapsed":1071,"user":{"displayName":"himanshu bansal","photoUrl":"","userId":"02724652374268117622"}},"colab":{"base_uri":"https://localhost:8080/","height":314}},"source":["train.describe()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>feature_0</th>\n","      <th>feature_1</th>\n","      <th>feature_2</th>\n","      <th>feature_3</th>\n","      <th>feature_4</th>\n","      <th>feature_5</th>\n","      <th>feature_6</th>\n","      <th>feature_7</th>\n","      <th>feature_8</th>\n","      <th>feature_9</th>\n","      <th>feature_10</th>\n","      <th>feature_11</th>\n","      <th>feature_12</th>\n","      <th>feature_13</th>\n","      <th>feature_14</th>\n","      <th>feature_15</th>\n","      <th>labels</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>33908.000000</td>\n","      <td>33908.000000</td>\n","      <td>33908.000000</td>\n","      <td>33908.000000</td>\n","      <td>33908.000000</td>\n","      <td>33908.000000</td>\n","      <td>33908.000000</td>\n","      <td>33908.000000</td>\n","      <td>33908.000000</td>\n","      <td>33908.000000</td>\n","      <td>33908.000000</td>\n","      <td>33908.000000</td>\n","      <td>33908.000000</td>\n","      <td>33908.000000</td>\n","      <td>33908.000000</td>\n","      <td>33908.000000</td>\n","      <td>33908.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>-0.004158</td>\n","      <td>0.002584</td>\n","      <td>-0.000213</td>\n","      <td>-0.000053</td>\n","      <td>-0.000298</td>\n","      <td>-0.004652</td>\n","      <td>-0.007498</td>\n","      <td>4.336381</td>\n","      <td>1.171051</td>\n","      <td>1.225345</td>\n","      <td>0.018137</td>\n","      <td>0.555503</td>\n","      <td>0.159667</td>\n","      <td>0.639407</td>\n","      <td>5.520497</td>\n","      <td>2.562375</td>\n","      <td>0.116993</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.999776</td>\n","      <td>1.014268</td>\n","      <td>1.000872</td>\n","      <td>1.002512</td>\n","      <td>1.003724</td>\n","      <td>0.993984</td>\n","      <td>0.802696</td>\n","      <td>3.273376</td>\n","      <td>0.606730</td>\n","      <td>0.749104</td>\n","      <td>0.133450</td>\n","      <td>0.496917</td>\n","      <td>0.366303</td>\n","      <td>0.897627</td>\n","      <td>3.003241</td>\n","      <td>0.987148</td>\n","      <td>0.321417</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>-2.159994</td>\n","      <td>-3.081149</td>\n","      <td>-1.779108</td>\n","      <td>-1.002478</td>\n","      <td>-0.569351</td>\n","      <td>-0.411453</td>\n","      <td>-0.251940</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>-0.747384</td>\n","      <td>-0.422787</td>\n","      <td>-0.938003</td>\n","      <td>-0.602517</td>\n","      <td>-0.569351</td>\n","      <td>-0.411453</td>\n","      <td>-0.251940</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>3.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>-0.182341</td>\n","      <td>-0.297324</td>\n","      <td>0.023260</td>\n","      <td>-0.303517</td>\n","      <td>-0.246560</td>\n","      <td>-0.411453</td>\n","      <td>-0.251940</td>\n","      <td>4.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>6.000000</td>\n","      <td>3.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>0.665225</td>\n","      <td>0.022901</td>\n","      <td>0.624050</td>\n","      <td>0.236237</td>\n","      <td>0.076230</td>\n","      <td>-0.411453</td>\n","      <td>-0.251940</td>\n","      <td>7.000000</td>\n","      <td>2.000000</td>\n","      <td>2.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>8.000000</td>\n","      <td>3.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>5.091402</td>\n","      <td>33.094776</td>\n","      <td>1.825628</td>\n","      <td>18.094700</td>\n","      <td>19.443647</td>\n","      <td>8.127648</td>\n","      <td>23.625644</td>\n","      <td>11.000000</td>\n","      <td>2.000000</td>\n","      <td>3.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>2.000000</td>\n","      <td>11.000000</td>\n","      <td>3.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["          feature_0     feature_1  ...    feature_15        labels\n","count  33908.000000  33908.000000  ...  33908.000000  33908.000000\n","mean      -0.004158      0.002584  ...      2.562375      0.116993\n","std        0.999776      1.014268  ...      0.987148      0.321417\n","min       -2.159994     -3.081149  ...      0.000000      0.000000\n","25%       -0.747384     -0.422787  ...      3.000000      0.000000\n","50%       -0.182341     -0.297324  ...      3.000000      0.000000\n","75%        0.665225      0.022901  ...      3.000000      0.000000\n","max        5.091402     33.094776  ...      3.000000      1.000000\n","\n","[8 rows x 17 columns]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"aNl0PJdhBr5n","colab_type":"code","outputId":"99335b2b-8967-494c-e2ae-8791ced66188","executionInfo":{"status":"ok","timestamp":1587745931418,"user_tz":-330,"elapsed":1095,"user":{"displayName":"himanshu bansal","photoUrl":"","userId":"02724652374268117622"}},"colab":{"base_uri":"https://localhost:8080/","height":314}},"source":["test.describe()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>feature_0</th>\n","      <th>feature_1</th>\n","      <th>feature_2</th>\n","      <th>feature_3</th>\n","      <th>feature_4</th>\n","      <th>feature_5</th>\n","      <th>feature_6</th>\n","      <th>feature_7</th>\n","      <th>feature_8</th>\n","      <th>feature_9</th>\n","      <th>feature_10</th>\n","      <th>feature_11</th>\n","      <th>feature_12</th>\n","      <th>feature_13</th>\n","      <th>feature_14</th>\n","      <th>feature_15</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>11303.000000</td>\n","      <td>11303.000000</td>\n","      <td>11303.000000</td>\n","      <td>11303.000000</td>\n","      <td>11303.000000</td>\n","      <td>11303.000000</td>\n","      <td>11303.000000</td>\n","      <td>11303.000000</td>\n","      <td>11303.000000</td>\n","      <td>11303.000000</td>\n","      <td>11303.000000</td>\n","      <td>11303.000000</td>\n","      <td>11303.000000</td>\n","      <td>11303.000000</td>\n","      <td>11303.000000</td>\n","      <td>11303.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>0.012473</td>\n","      <td>-0.007751</td>\n","      <td>0.000638</td>\n","      <td>0.000159</td>\n","      <td>0.000894</td>\n","      <td>0.013955</td>\n","      <td>0.022493</td>\n","      <td>4.349907</td>\n","      <td>1.157746</td>\n","      <td>1.223215</td>\n","      <td>0.017694</td>\n","      <td>0.556843</td>\n","      <td>0.161904</td>\n","      <td>0.642750</td>\n","      <td>5.530567</td>\n","      <td>2.552774</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1.000657</td>\n","      <td>0.955969</td>\n","      <td>0.997467</td>\n","      <td>0.992516</td>\n","      <td>0.988834</td>\n","      <td>1.017796</td>\n","      <td>1.437557</td>\n","      <td>3.270622</td>\n","      <td>0.612624</td>\n","      <td>0.744699</td>\n","      <td>0.131844</td>\n","      <td>0.496780</td>\n","      <td>0.368379</td>\n","      <td>0.898957</td>\n","      <td>3.018013</td>\n","      <td>0.994778</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>-2.159994</td>\n","      <td>-1.535528</td>\n","      <td>-1.779108</td>\n","      <td>-0.998595</td>\n","      <td>-0.569351</td>\n","      <td>-0.411453</td>\n","      <td>-0.251940</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>-0.747384</td>\n","      <td>-0.425743</td>\n","      <td>-0.938003</td>\n","      <td>-0.602517</td>\n","      <td>-0.569351</td>\n","      <td>-0.411453</td>\n","      <td>-0.251940</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>3.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>-0.182341</td>\n","      <td>-0.306520</td>\n","      <td>0.023260</td>\n","      <td>-0.299633</td>\n","      <td>-0.246560</td>\n","      <td>-0.411453</td>\n","      <td>-0.251940</td>\n","      <td>4.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>6.000000</td>\n","      <td>3.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>0.759399</td>\n","      <td>0.015511</td>\n","      <td>0.624050</td>\n","      <td>0.232354</td>\n","      <td>0.076230</td>\n","      <td>-0.411453</td>\n","      <td>-0.251940</td>\n","      <td>7.000000</td>\n","      <td>2.000000</td>\n","      <td>2.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>8.000000</td>\n","      <td>3.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>5.091402</td>\n","      <td>26.222907</td>\n","      <td>1.825628</td>\n","      <td>12.068100</td>\n","      <td>12.342261</td>\n","      <td>8.297431</td>\n","      <td>119.135982</td>\n","      <td>11.000000</td>\n","      <td>2.000000</td>\n","      <td>3.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>2.000000</td>\n","      <td>11.000000</td>\n","      <td>3.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["          feature_0     feature_1  ...    feature_14    feature_15\n","count  11303.000000  11303.000000  ...  11303.000000  11303.000000\n","mean       0.012473     -0.007751  ...      5.530567      2.552774\n","std        1.000657      0.955969  ...      3.018013      0.994778\n","min       -2.159994     -1.535528  ...      0.000000      0.000000\n","25%       -0.747384     -0.425743  ...      3.000000      3.000000\n","50%       -0.182341     -0.306520  ...      6.000000      3.000000\n","75%        0.759399      0.015511  ...      8.000000      3.000000\n","max        5.091402     26.222907  ...     11.000000      3.000000\n","\n","[8 rows x 16 columns]"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"0KQ9u8XbCO1W","colab_type":"text"},"source":["All the features are numnerical,and some of them seem to be scaled.\n","We are all good to form a baseline model.\n","Let's try it with the decision tree."]},{"cell_type":"code","metadata":{"id":"xWq87ZPzCDwT","colab_type":"code","outputId":"4e5bc861-a42c-4760-9cbb-383a74af8951","executionInfo":{"status":"ok","timestamp":1587879932741,"user_tz":-330,"elapsed":1973,"user":{"displayName":"himanshu bansal","photoUrl":"","userId":"02724652374268117622"}},"colab":{"base_uri":"https://localhost:8080/","height":69}},"source":["import matplotlib.pyplot as plt\n","\n","train['labels'].value_counts()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    29941\n","1     3967\n","Name: labels, dtype: int64"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"R3hjcrBCFUfI","colab_type":"text"},"source":["We see that the data is hugely imbalanced.\n","This will need to be handled."]},{"cell_type":"code","metadata":{"id":"IwvHFpxCDyDc","colab_type":"code","outputId":"1a0c8527-349e-4bff-c9e3-729476cefd1f","executionInfo":{"status":"ok","timestamp":1587879967621,"user_tz":-330,"elapsed":14487,"user":{"displayName":"himanshu bansal","photoUrl":"","userId":"02724652374268117622"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["train_zero=train[train['labels']==0].sample(4000)\n","print(len(train_zero))\n","train_one= train[train['labels']==1]\n","print(len(train_one))"],"execution_count":6,"outputs":[{"output_type":"stream","text":["4000\n","3967\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"O5E6uaT9GWCD","colab_type":"text"},"source":["Here, we have selected 3967 random rows from train that have labels value equal to 0, same number of labels with value one have been taken, after we mix them the data imbalance problem will be taken care of."]},{"cell_type":"code","metadata":{"id":"n_v8uQdFF2NN","colab_type":"code","outputId":"91aede3c-b208-40f1-c380-9e913300fe49","executionInfo":{"status":"ok","timestamp":1587881430764,"user_tz":-330,"elapsed":710,"user":{"displayName":"himanshu bansal","photoUrl":"","userId":"02724652374268117622"}},"colab":{"base_uri":"https://localhost:8080/","height":173}},"source":["import numpy as np\n","\n","train_new=pd.concat([train_zero, train_one])\n","idx = np.random.permutation(train_new.index)\n","train_new.reindex(idx,axis=0)\n","\n","print(len(train_new))\n","print(train_new.head())"],"execution_count":35,"outputs":[{"output_type":"stream","text":["7967\n","       feature_0  feature_1  feature_2  ...  feature_14  feature_15  labels\n","18942  -0.935732  -0.415233  -0.577529  ...           1           3       0\n","33854   1.889487   0.780275  -1.178318  ...           3           3       0\n","10650   1.324443   0.860413   1.705471  ...           4           3       0\n","10685   0.194355   0.086946  -0.457371  ...           1           3       0\n","25245  -0.088167  -0.363340   0.023260  ...           6           3       0\n","\n","[5 rows x 17 columns]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"AY2jOErcKUMC","colab_type":"code","colab":{}},"source":["from sklearn.metrics import confusion_matrix \n","from sklearn.model_selection import train_test_split \n","from sklearn.tree import DecisionTreeClassifier \n","from sklearn.metrics import accuracy_score \n","from sklearn.metrics import classification_report\n","from sklearn.metrics import f1_score\n","from sklearn import preprocessing\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import AdaBoostClassifier\n","from sklearn.ensemble import GradientBoostingClassifier\n","from xgboost import XGBClassifier\n","from sklearn.ensemble import VotingClassifier\n","from imblearn.over_sampling import SMOTE"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"p8AiV9WkDXp4","colab_type":"code","colab":{}},"source":["for x in range(1):\n","  print(train_new.columns)\n","  a=train_new.iloc[x]\n","  sum=0\n","  for b in a:\n","    print(type(b))\n","    sum=sum+float(b)\n","  print(sum)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HMA-YiiADE9A","colab_type":"code","colab":{}},"source":["test.to_csv('test_FE.csv', index=False)\n","train_new.to_csv('train_FE.csv', index=False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"0g5fqjpZdFMU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"outputId":"df4a3740-ae6e-41dd-d708-e0de081970b3","executionInfo":{"status":"ok","timestamp":1587887259766,"user_tz":-330,"elapsed":737,"user":{"displayName":"himanshu bansal","photoUrl":"","userId":"02724652374268117622"}}},"source":["train_new.columns"],"execution_count":100,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['feature_0', 'feature_1', 'feature_2', 'feature_3', 'feature_4',\n","       'feature_5', 'feature_6', 'feature_7', 'feature_8', 'feature_9',\n","       'feature_10', 'feature_11', 'feature_12', 'feature_13', 'feature_14',\n","       'feature_15', 'labels', 'fe1'],\n","      dtype='object')"]},"metadata":{"tags":[]},"execution_count":100}]},{"cell_type":"markdown","metadata":{"id":"8A9RYgARdC-C","colab_type":"text"},"source":["train_new"]},{"cell_type":"code","metadata":{"id":"AUI1RR2bGfKs","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":303},"outputId":"91bbf10b-afee-4604-91fe-b5ad0c844624","executionInfo":{"status":"ok","timestamp":1587887294976,"user_tz":-330,"elapsed":794,"user":{"displayName":"himanshu bansal","photoUrl":"","userId":"02724652374268117622"}}},"source":["import matplotlib.pyplot as plt\n","x=train_new['fe1']\n","y=train_new['feature_7']**2\n","colors = (0,0,0)\n","plt.scatter(x, y, c=colors, alpha=0.5)\n","plt.show()"],"execution_count":102,"outputs":[{"output_type":"stream","text":["'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"cv5DK-U-b4Vx","colab_type":"text"},"source":["'feature_4','feature_6',"]},{"cell_type":"code","metadata":{"id":"pQT7SE3iK7Eo","colab_type":"code","colab":{}},"source":["def upsample(X,y):\n","  sm = SMOTE(random_state=42)\n","  X_res, y_res = sm.fit_resample(X, y)\n","  return X_res, y_res\n","\n","def new_features(data):\n","  flag=False\n","  if 'labels' in data.columns:\n","    series=data.labels\n","    data.drop(columns=['labels'])\n","    flag=True\n","  sums=[]\n","  for index in range(0,len(data)):\n","    row=data.iloc[index]\n","    sum=0\n","    for entry in row:\n","      sum=sum+float(entry)\n","    sums.append(sum)\n","  print(len(data))\n","  print(len(sums))\n","  #print(len(series))\n","  data['fe1']=''\n","  data['fe1']=sums\n","  if flag==True:\n","    data['labels']=''\n","    data['labels']=series\n","  return data\n","\n","\n","def splitdataset(balance_data): \n","  \n","    # Separating the target variable \n","    X = balance_data.values[:, 0:16] \n","    Y = balance_data.values[:, 16] \n","  \n","    # Splitting the dataset into train and test \n","    X_train, X_test, y_train, y_test = train_test_split(  \n","    X, Y, test_size = 0.1, random_state = 100) \n","      \n","    return X, Y, X_train, X_test, y_train, y_test\n","def train_using_gini(X_train, X_test, y_train): \n","  \n","    # Creating the classifier object \n","    clf_gini = DecisionTreeClassifier(criterion = \"gini\", \n","            random_state = 100,max_depth=7, min_samples_leaf=5) \n","  \n","    # Performing training \n","    clf_gini.fit(X_train, y_train) \n","    return clf_gini\n","def train_using_entropy(X_train, X_test, y_train): \n","  \n","    # Decision tree with entropy \n","    clf_entropy = DecisionTreeClassifier( \n","            criterion = \"entropy\", random_state = 100, \n","            max_depth = 7, min_samples_leaf = 5) \n","  \n","    # Performing training \n","    clf_entropy.fit(X_train, y_train) \n","    return clf_entropy\n","def prediction(X_test, clf_object): \n","  \n","    # Predicton on test with giniIndex \n","    y_pred = clf_object.predict(X_test) \n","    print(\"Predicted values:\") \n","    print(y_pred) \n","    return y_pred\n","\n","def cal_accuracy(y_test, y_pred): \n","      \n","    print(\"Confusion Matrix: \", \n","        confusion_matrix(y_test, y_pred)) \n","      \n","    print (\"Accuracy : \", \n","    accuracy_score(y_test,y_pred)*100) \n","      \n","    print(\"Report : \", \n","    classification_report(y_test, y_pred))\n","\n","def cal_f1_score(y_test,y_pred):\n","  append_logs(f1_score(y_test,y_pred))\n","  print(\"F1 score is\",f1_score(y_test,y_pred))\n","\n","def make_submission(y_sub,title):\n","  sub=pd.DataFrame(columns=['labels'])\n","  sub['labels']=y_sub\n","  sub.to_excel(str(title)+'.xlsx', index=False)\n","\n","def append_logs(f1):\n","  logs.append(f1)\n","\n","def scale_df(df):\n","  min_max_scaler = preprocessing.MinMaxScaler()\n","  array = min_max_scaler.fit_transform(df)\n","  df_new = pd.DataFrame(data=array, columns=df.columns)\n","    #df.column=scaled_array\n","  return df_new\n","\n","def train_using_bayes(X_train,y_train):\n","  clf = GaussianNB()\n","  clf.fit(X_train,y_train)\n","  return clf\n","\n","def train_using_logisticreg(X_train, y_train):\n","  clf=LogisticRegression(random_state=0)\n","  clf.fit(X_train,y_train)\n","  return clf\n","\n","def train_using_adaboost(X_train,y_train):\n","  clf = AdaBoostClassifier(n_estimators=50, random_state=0)\n","  clf.fit(X_train,y_train)\n","  return clf\n","\n","def train_using_gradientboost(X_train,y_train):\n","  clf=GradientBoostingClassifier(n_estimators=700, random_state=0)\n","  clf.fit(X_train,y_train)\n","  return clf\n","\n","def train_using_XGBoost(X_train,y_train):\n","  clf=XGBClassifier(n_estimators=300, random_state=0)\n","  clf.fit(X_train,y_train)\n","  return clf\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gje2pGjuMqnN","colab_type":"code","colab":{}},"source":["X, Y, X_train, X_test, y_train, y_test = splitdataset(train_new)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ndWmCqS2NImG","colab_type":"code","colab":{}},"source":["clf_gini = train_using_gini(X_train, X_test, y_train) \n","clf_entropy = tarin_using_entropy(X_train, X_test, y_train)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Byd7-ANvNMNk","colab_type":"code","outputId":"54029392-6bd2-4228-8ddd-7612043c17b0","executionInfo":{"status":"ok","timestamp":1587752423096,"user_tz":-330,"elapsed":1034,"user":{"displayName":"himanshu bansal","photoUrl":"","userId":"02724652374268117622"}},"colab":{"base_uri":"https://localhost:8080/","height":277}},"source":["y_pred_gini = prediction(X_test, clf_gini) \n","cal_accuracy(y_test, y_pred_gini)\n","cal_f1_score(y_test,y_pred_gini)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Predicted values:\n","[1. 0. 1. ... 1. 1. 1.]\n","Confusion Matrix:  [[610 176]\n"," [118 683]]\n","Accuracy :  81.47448015122873\n","Report :                precision    recall  f1-score   support\n","\n","         0.0       0.84      0.78      0.81       786\n","         1.0       0.80      0.85      0.82       801\n","\n","    accuracy                           0.81      1587\n","   macro avg       0.82      0.81      0.81      1587\n","weighted avg       0.82      0.81      0.81      1587\n","\n","F1 score is 0.8228915662650602\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"jo6HxBb5NR-o","colab_type":"code","outputId":"18810378-75ae-42d9-d1ce-fd8767ced86a","executionInfo":{"status":"ok","timestamp":1587752427191,"user_tz":-330,"elapsed":1825,"user":{"displayName":"himanshu bansal","photoUrl":"","userId":"02724652374268117622"}},"colab":{"base_uri":"https://localhost:8080/","height":277}},"source":["y_pred_entropy = prediction(X_test, clf_entropy) \n","cal_accuracy(y_test, y_pred_entropy)\n","cal_f1_score(y_test,y_pred_entropy)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Predicted values:\n","[1. 0. 1. ... 1. 1. 1.]\n","Confusion Matrix:  [[613 173]\n"," [129 672]]\n","Accuracy :  80.97038437303088\n","Report :                precision    recall  f1-score   support\n","\n","         0.0       0.83      0.78      0.80       786\n","         1.0       0.80      0.84      0.82       801\n","\n","    accuracy                           0.81      1587\n","   macro avg       0.81      0.81      0.81      1587\n","weighted avg       0.81      0.81      0.81      1587\n","\n","F1 score is 0.8165249088699879\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8_3sQ2jUNWxQ","colab_type":"code","outputId":"8c877228-5d69-4d74-ea53-30fc537b9b5e","executionInfo":{"status":"ok","timestamp":1587752436898,"user_tz":-330,"elapsed":855,"user":{"displayName":"himanshu bansal","photoUrl":"","userId":"02724652374268117622"}},"colab":{"base_uri":"https://localhost:8080/","height":87}},"source":["y_pred_entropy = prediction(test, clf_entropy) \n","y_pred_gini=prediction(test,clf_gini)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Predicted values:\n","[1. 1. 0. ... 0. 1. 0.]\n","Predicted values:\n","[1. 1. 0. ... 0. 1. 0.]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3Vm5hwPhPoZa","colab_type":"code","colab":{}},"source":["make_submission(y_pred_entropy,'sub_entropy')\n","make_submission(y_pred_gini,'sub_gini')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NslWNRuGShJ3","colab_type":"text"},"source":["These got us a best score of .46585\n","\n","Optimisations:\n","1. Data undersampling can be reduced.(doesn't work)\n","2. Data scaling can be undertaken. (that did well) 0.53251\n","3. Stronger models can be used.(.57 xgboost)\n","4. No of features can be reduced.(Doesn't seem possible)\n","5. Feature engineering can be tried."]},{"cell_type":"code","metadata":{"id":"TcFscBjJRLay","colab_type":"code","colab":{}},"source":["train_scaled= scale_df(train_new)\n","test_scaled= scale_df(test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5M_KQjg-Ykt3","colab_type":"code","colab":{}},"source":["test_scaled.describe()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sjjbagrHh0oz","colab_type":"text"},"source":["Now all the features have been scaled"]},{"cell_type":"code","metadata":{"id":"nIf6tp7sdZbY","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":69},"outputId":"27d6be2f-5ebd-4884-fd21-ea9c45831893","executionInfo":{"status":"ok","timestamp":1587871838387,"user_tz":-330,"elapsed":9042,"user":{"displayName":"himanshu bansal","photoUrl":"","userId":"02724652374268117622"}}},"source":["train_scaled['labels'].value_counts()"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0    3967\n","0.0    3967\n","Name: labels, dtype: int64"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"TutZWdcBhwp7","colab_type":"code","colab":{}},"source":["X, Y, X_train, X_test, y_train, y_test = splitdataset(train_scaled)\n","clf_gini = train_using_gini(X_train, X_test, y_train) \n","clf_entropy = tarin_using_entropy(X_train, X_test, y_train)\n","y_pred_gini = prediction(X_test, clf_gini) \n","cal_accuracy(y_test, y_pred_gini)\n","cal_f1_score(y_test,y_pred_gini)\n","y_pred_entropy = prediction(X_test, clf_entropy) \n","cal_accuracy(y_test, y_pred_entropy)\n","cal_f1_score(y_test,y_pred_entropy)\n","y_pred_entropy = prediction(test_scaled, clf_entropy) \n","y_pred_gini=prediction(test_scaled,clf_gini)\n","make_submission(y_pred_entropy,'sub_entropy_scaled1')\n","make_submission(y_pred_gini,'sub_gini_scaled1')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lEJ6lybAjaRX","colab_type":"code","colab":{}},"source":["def predictions_using_bayes():\n","  X, Y, X_train, X_test, y_train, y_test = splitdataset(train_scaled)\n","  clf_bayes = train_using_bayes(X_train, y_train)\n","  y_pred_bayes = prediction(X_test, clf_bayes)\n","  cal_accuracy(y_test, y_pred_bayes)\n","  cal_f1_score(y_test,y_pred_bayes)\n","  y_pred_bayes=prediction(test,clf_bayes)\n","  make_submission(y_pred_bayes,'sub_bayes_scaled')\n","\n","def predictions_using_logisticreg():\n","  X, Y, X_train, X_test, y_train, y_test = splitdataset(train_scaled)\n","  clf_logistic = train_using_logisticreg(X_train, y_train)\n","  y_pred_logistic = prediction(X_test, clf_logistic)\n","  cal_accuracy(y_test, y_pred_logistic)\n","  cal_f1_score(y_test,y_pred_logistic)\n","  y_pred_logireg=prediction(test,clf_logistic)\n","  make_submission(y_pred_logireg,'sub_logistic_scaled')\n","\n","def predictions_using_adaboost():\n","  X, Y, X_train, X_test, y_train, y_test = splitdataset(train)\n","  clf_adaboost = train_using_adaboost(X_train, y_train)\n","  y_pred_adaboost = prediction(X_test, clf_adaboost)\n","  cal_accuracy(y_test, y_pred_adaboost)\n","  cal_f1_score(y_test,y_pred_adaboost)\n","  y_pred_adaboost=prediction(test,clf_adaboost)\n","  make_submission(y_pred_adaboost,'sub_adaboost_scaled1')\n","\n","def predictions_using_gradientboost():\n","  #train_s=scale_df(train)\n","  X, Y, X_train, X_test, y_train, y_test = splitdataset(train)\n","  X_train,y_train=upsample(X_train,y_train)\n","  clf_gradient = train_using_gradientboost(X_train, y_train)\n","  #test_s=scale_df(test)\n","  common_function(X_test, clf_gradient,y_test,test,'sub_gradientboosting6')\n","def predictions_using_xgboost():\n","  X, Y, X_train, X_test, y_train, y_test = splitdataset(train)\n","  X_train,y_train=upsample(X_train,y_train)\n","  clf_xg = train_using_XGBoost(X_train, y_train)\n","  y_pred = prediction(X_test, clf_xg)\n","  cal_accuracy(y_test, y_pred)\n","  cal_f1_score(y_test,y_pred)\n","  y_pred=prediction(test.values,clf_xg)\n","  make_submission(y_pred,'xgboost2')\n","\n","def common_function(X_test, clf,y_test,test,name):\n","  y_pred = prediction(X_test, clf)\n","  cal_accuracy(y_test, y_pred)\n","  cal_f1_score(y_test,y_pred)\n","  y_pred=prediction(test,clf)\n","  make_submission(y_pred,str(name))\n","\n","def predictions_using_blending():\n","  X, Y, X_train, X_test, y_train, y_test = splitdataset(train_new)\n","  clf_xg = train_using_XGBoost(X_train, y_train)\n","  t_pred=train_using_XGBoost(X_train, y_train)\n","  y_predxg=prediction(test.values,clf_xg) # 1\n","  clf_bayes = train_using_bayes(X_train, y_train)\n","  y_pred_bayes=prediction(test,clf_bayes)\n","  clf_gini = train_using_gini(X_train, X_test, y_train)\n","  y_pred_gini=prediction(test,clf_gini)\n","  test['p1']=''\n","  test['p1']=y_predxg\n","  test['p2']=''\n","  test['p2']=y_pred_bayes\n","  test['p3']=''\n","  test['p3']=y_pred_gini\n","  clf_gradient = train_using_gradientboost(X_train, y_train)\n","  common_function(X_test, clf_gradient,y_test,test,'sub_gradientboosting')\n","\n","def predictions_using_ensemble():\n","  X, Y, X_train, X_test, y_train, y_test = splitdataset(train)\n","  X_train,y_train=upsample(X_train,y_train)\n","  model1=DecisionTreeClassifier(criterion = \"gini\", random_state = 100,max_depth=7, min_samples_leaf=5)\n","  model2=LogisticRegression(random_state=0)\n","  model3=GaussianNB()\n","  model = VotingClassifier(estimators=[('gini', model1), ('lr', model2),('naive',model3)], voting='hard')\n","  model.fit(X_train,y_train)\n","  common_function(X_test, model,y_test,test,'sub_voting2')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9h5KiiV4jgWl","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":367},"outputId":"698bf38e-667b-4071-f226-c67e97dd60c1","executionInfo":{"status":"ok","timestamp":1587915765080,"user_tz":-330,"elapsed":96190,"user":{"displayName":"himanshu bansal","photoUrl":"","userId":"02724652374268117622"}}},"source":["predictions_using_gradientboost()"],"execution_count":32,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n","  warnings.warn(msg, category=FutureWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["Predicted values:\n","[0. 0. 0. ... 0. 0. 0.]\n","Confusion Matrix:  [[2835  136]\n"," [ 190  230]]\n","Accuracy :  90.38631672073136\n","Report :                precision    recall  f1-score   support\n","\n","         0.0       0.94      0.95      0.95      2971\n","         1.0       0.63      0.55      0.59       420\n","\n","    accuracy                           0.90      3391\n","   macro avg       0.78      0.75      0.77      3391\n","weighted avg       0.90      0.90      0.90      3391\n","\n","F1 score is 0.5852417302798982\n","Predicted values:\n","[1. 0. 0. ... 0. 0. 0.]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Fht8j_TBOXdo","colab_type":"text"},"source":["We may have to remove the minmaxscaling, we have got three models that have accuracy over and around 80%, we should be able to build an ensemble model using that. Before that let's find out a way to reduce the number of features."]},{"cell_type":"code","metadata":{"id":"L_eUSgaG8LIZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":121},"outputId":"01857371-26aa-49e1-edd7-4d4872b096ec","executionInfo":{"status":"ok","timestamp":1587811500977,"user_tz":-330,"elapsed":690,"user":{"displayName":"himanshu bansal","photoUrl":"","userId":"02724652374268117622"}}},"source":["logs"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.8134092346616065,\n"," 0.8150765606595995,\n"," 0.8717026378896882,\n"," 0.8686746987951808,\n"," 0.8686746987951808,\n"," 0.8686746987951808]"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"psTU1gAJOMin","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":283},"outputId":"271586bf-2e09-428f-a67b-cbfad1a460db","executionInfo":{"status":"ok","timestamp":1587803056083,"user_tz":-330,"elapsed":886,"user":{"displayName":"himanshu bansal","photoUrl":"","userId":"02724652374268117622"}}},"source":["import numpy as np\n","from sklearn.decomposition import PCA\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import scale\n","%matplotlib inline\n","\n","X=train.values[:, 0:16]\n","\n","#Scaling the values\n","X = scale(X)\n","\n","pca = PCA(n_components=16)\n","\n","pca.fit(X)\n","\n","#The amount of variance that each PC explains\n","var= pca.explained_variance_ratio_\n","\n","#Cumulative Variance explains\n","var1=np.cumsum(np.round(pca.explained_variance_ratio_, decimals=4)*100)\n","plt.plot(var1)"],"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f29fbca9908>]"]},"metadata":{"tags":[]},"execution_count":33},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"M_qwbsgIcIhg","colab_type":"text"},"source":["It shows that the all the features are pretty much independent, there is not much scope for dimentionality reduction."]},{"cell_type":"code","metadata":{"id":"Da98YGKObnPK","colab_type":"code","colab":{}},"source":["#let's try blending\n"],"execution_count":0,"outputs":[]}]}